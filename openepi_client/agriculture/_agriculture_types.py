# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2024-12-05T09:50:18+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field, RootModel
from typing_extensions import Literal


class Deforestation(BaseModel):
    daterange_tot_treeloss: Optional[float] = None
    error: Optional[str] = None


class IntensityEnum(RootModel[Literal["P", "R", "Y", "G"]]):
    root: Literal["P", "R", "Y", "G"]


class PeakTimingEnum(RootModel[Literal["BB", "GC", "GB"]]):
    root: Literal["BB", "GC", "GB"]


class SoilType(BaseModel):
    error: Optional[str] = None
    most_probable_soil_type: Optional[str] = Field(
        None, description="The most probable soil type at the queried location"
    )


class Weather(BaseModel):
    air_temperature: Optional[float] = None
    cloud_area_fraction: Optional[float] = None
    error: Optional[str] = None
    precipitation_amount: Optional[float] = None
    relative_humidity: Optional[float] = None
    wind_from_direction: Optional[float] = None
    wind_speed: Optional[float] = None
    wind_speed_of_gust: Optional[float] = None


class Flood(BaseModel):
    error: Optional[str] = None
    intensity: Optional[IntensityEnum] = None
    issued_on: Optional[str] = None
    peak_day: Optional[str] = None
    peak_step: Optional[int] = None
    peak_timing: Optional[PeakTimingEnum] = None


class Summary(BaseModel):
    deforestation: Optional[Deforestation] = Field(
        None, description="deforestation from 2001 to 2022 in the given coordinates."
    )
    flood: Optional[Flood] = Field(
        None, description="Flood forecast in the given coordinates."
    )
    soil: Optional[SoilType] = Field(
        None, description="The most probable soil type in the given coordinates."
    )
    weather: Optional[Weather] = Field(
        None, description="Current weather and rain forecast in the given coordinates."
    )
