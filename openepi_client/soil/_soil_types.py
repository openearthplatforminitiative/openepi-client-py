# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:8000/openapi.json
#   timestamp: 2024-02-20T11:42:57+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel
from typing_extensions import Literal


class FeatureType(RootModel[Literal["Feature"]]):
    root: Literal["Feature"] = Field(..., title="FeatureType")


class GeometryType(RootModel[Literal["Point", "Polygon"]]):
    root: Literal["Point", "Polygon"] = Field(..., title="GeometryType")


class PointGeometry(BaseModel):
    coordinates: List[float] = Field(
        ...,
        description="[longitude, latitude] decimal coordinates",
        examples=[[60.5, 11.59]],
        max_length=2,
        min_length=2,
        title="Coordinates",
    )
    type: GeometryType


class SoilDepthBottom(RootModel[Literal[5, 30, 15, 30, 60, 100, 200]]):
    root: Literal[5, 30, 15, 30, 60, 100, 200] = Field(..., title="SoilDepthBottom")


class SoilDepthLabels(
    RootModel[
        Literal[
            "0-5cm", "0-30cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm"
        ]
    ]
):
    root: Literal[
        "0-5cm", "0-30cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm"
    ] = Field(..., title="SoilDepthLabels")


class SoilDepthTop(RootModel[Literal[0, 0, 5, 15, 30, 60, 100]]):
    root: Literal[0, 0, 5, 15, 30, 60, 100] = Field(..., title="SoilDepthTop")


class SoilDepthUnits(RootModel[Literal["cm", "cm", "cm", "cm", "cm", "cm", "cm"]]):
    root: Literal["cm", "cm", "cm", "cm", "cm", "cm", "cm"] = Field(
        ..., title="SoilDepthUnits"
    )


class SoilPropertiesCodes(
    RootModel[
        Literal[
            "bdod",
            "cec",
            "cfvo",
            "clay",
            "nitrogen",
            "ocd",
            "ocs",
            "phh2o",
            "sand",
            "silt",
            "soc",
        ]
    ]
):
    root: Literal[
        "bdod",
        "cec",
        "cfvo",
        "clay",
        "nitrogen",
        "ocd",
        "ocs",
        "phh2o",
        "sand",
        "silt",
        "soc",
    ] = Field(..., title="SoilPropertiesCodes")


class SoilPropertiesConversionFactors(
    RootModel[Literal[100, 10, 10, 10, 100, 10, 10, 10, 10, 10, 10]]
):
    root: Literal[100, 10, 10, 10, 100, 10, 10, 10, 10, 10, 10] = Field(
        ..., title="SoilPropertiesConversionFactors"
    )


class SoilPropertiesMappedUnits(
    RootModel[
        Literal[
            "cg/cm³",
            "mmol(c)/kg",
            "cm³/dm³",
            "g/kg",
            "cg/kg",
            "hg/m³",
            "t/ha",
            "pH*10",
            "g/kg",
            "g/kg",
            "dg/kg",
        ]
    ]
):
    root: Literal[
        "cg/cm³",
        "mmol(c)/kg",
        "cm³/dm³",
        "g/kg",
        "cg/kg",
        "hg/m³",
        "t/ha",
        "pH*10",
        "g/kg",
        "g/kg",
        "dg/kg",
    ] = Field(..., title="SoilPropertiesMappedUnits")


class SoilPropertiesNames(
    RootModel[
        Literal[
            "Bulk density",
            "Cation exchange capacity (CEC pH 7)",
            "Coarse fragments",
            "Clay",
            "Nitrogen",
            "Organic carbon density",
            "Organic carbon stocks",
            "pH water",
            "Sand",
            "Silt",
            "Soil organic carbon",
        ]
    ]
):
    root: Literal[
        "Bulk density",
        "Cation exchange capacity (CEC pH 7)",
        "Coarse fragments",
        "Clay",
        "Nitrogen",
        "Organic carbon density",
        "Organic carbon stocks",
        "pH water",
        "Sand",
        "Silt",
        "Soil organic carbon",
    ] = Field(..., title="SoilPropertiesNames")


class SoilPropertiesTargetUnits(
    RootModel[
        Literal[
            "kg/dm³",
            "cmol(c)/kg",
            "cm³/100cm³",
            "%",
            "g/kg",
            "hg/m³",
            "kg/m²",
            "pH",
            "%",
            "%",
            "g/kg",
        ]
    ]
):
    root: Literal[
        "kg/dm³",
        "cmol(c)/kg",
        "cm³/100cm³",
        "%",
        "g/kg",
        "hg/m³",
        "kg/m²",
        "pH",
        "%",
        "%",
        "g/kg",
    ] = Field(..., title="SoilPropertiesTargetUnits")


class SoilPropertyUnit(BaseModel):
    d_factor: SoilPropertiesConversionFactors = Field(
        ..., description="The conversion factor", examples=[10]
    )
    mapped_units: SoilPropertiesMappedUnits = Field(
        ..., description="The mapped unit of the soil property", examples=["cm³/dm³"]
    )
    target_units: SoilPropertiesTargetUnits = Field(
        ..., description="The target unit of the soil property", examples=["m³/ha"]
    )
    uncertainty_unit: str = Field(
        ...,
        description="The unit of the uncertainty",
        examples=[""],
        title="Uncertainty Unit",
    )


class SoilPropertyValues(BaseModel):
    mean: Optional[float] = Field(
        None,
        description="The mean value of the soil property",
        examples=[50],
        title="Mean",
    )
    Q0_05: Optional[float] = Field(
        None,
        alias="Q0.05",
        description="The 5th percentile of the soil property",
        examples=[40],
        title="Q0.05",
    )
    Q0_5: Optional[float] = Field(
        None,
        alias="Q0.5",
        description="The 50th percentile of the soil property",
        examples=[50],
        title="Q0.5",
    )
    Q0_95: Optional[float] = Field(
        None,
        alias="Q0.95",
        description="The 95th percentile of the soil property",
        examples=[60],
        title="Q0.95",
    )
    uncertainty: Optional[float] = Field(
        None,
        description="The uncertainty of the soil property",
        examples=[5],
        title="Uncertainty",
    )


class SoilTypes(
    RootModel[
        Literal[
            "Acrisols",
            "Albeluvisols",
            "Alisols",
            "Andosols",
            "Arenosols",
            "Calcisols",
            "Cambisols",
            "Chernozems",
            "Cryosols",
            "Durisols",
            "Ferralsols",
            "Fluvisols",
            "Gleysols",
            "Gypsisols",
            "Histosols",
            "Kastanozems",
            "Leptosols",
            "Lixisols",
            "Luvisols",
            "Nitisols",
            "Phaeozems",
            "Planosols",
            "Plinthosols",
            "Podzols",
            "Regosols",
            "Solonchaks",
            "Solonetz",
            "Stagnosols",
            "Umbrisols",
            "Vertisols",
            "No information available",
        ]
    ]
):
    root: Literal[
        "Acrisols",
        "Albeluvisols",
        "Alisols",
        "Andosols",
        "Arenosols",
        "Calcisols",
        "Cambisols",
        "Chernozems",
        "Cryosols",
        "Durisols",
        "Ferralsols",
        "Fluvisols",
        "Gleysols",
        "Gypsisols",
        "Histosols",
        "Kastanozems",
        "Leptosols",
        "Lixisols",
        "Luvisols",
        "Nitisols",
        "Phaeozems",
        "Planosols",
        "Plinthosols",
        "Podzols",
        "Regosols",
        "Solonchaks",
        "Solonetz",
        "Stagnosols",
        "Umbrisols",
        "Vertisols",
        "No information available",
    ] = Field(..., title="SoilTypes")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class BoundingBoxGeometry(BaseModel):
    coordinates: List[List[List[float]]] = Field(
        ...,
        description="[[[min_lon, min_lat], [max_lon, min_lat], [max_lon, max_lat], [min_lon, max_lat], [min_lon, min_lat]]]",
        examples=[
            [[[60.5, 11.59], [60.6, 11.59], [60.6, 11.6], [60.5, 11.6], [60.5, 11.59]]]
        ],
        title="Coordinates",
    )
    type: GeometryType


class DepthRange(BaseModel):
    top_depth: SoilDepthTop = Field(..., description="The top depth", examples=[0])
    bottom_depth: SoilDepthBottom = Field(
        ..., description="The bottom depth", examples=[5]
    )
    unit_depth: SoilDepthUnits = Field(
        ..., description="The unit of the depth range", examples=["cm"]
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class SoilDepth(BaseModel):
    range: DepthRange = Field(..., description="The soil depth range")
    label: SoilDepthLabels = Field(..., description="The soil depth label")
    values: SoilPropertyValues = Field(
        ..., description="The queried soil property values"
    )


class SoilLayer(BaseModel):
    code: SoilPropertiesCodes = Field(
        ..., description="The soil property code", examples=["bdod"]
    )
    name: SoilPropertiesNames = Field(
        ..., description="The name of the soil property", examples=["Bulk density"]
    )
    unit_measure: SoilPropertyUnit = Field(
        ..., description="The unit of the soil property"
    )
    depths: List[SoilDepth] = Field(
        ..., description="The queried soil depths with values", title="Depths"
    )


class SoilLayerList(BaseModel):
    layers: List[SoilLayer] = Field(
        ..., description="The queried soil property layers", title="Layers"
    )


class SoilPropertyJSON(BaseModel):
    type: FeatureType = Field(..., description="The feature type of the geojson-object")
    geometry: PointGeometry = Field(
        ..., description="The geometry of the queried location"
    )
    properties: SoilLayerList = Field(
        ..., description="The queried soil property information"
    )


class SoilTypeProbability(BaseModel):
    soil_type: SoilTypes = Field(
        ..., description="The soil type", examples=["Acrisols"]
    )
    probability: int = Field(
        ...,
        description="The probability of the soil type as an integer between 0 and 100",
        examples=[70],
        title="Probability",
    )


class SoilTypeSummary(BaseModel):
    soil_type: SoilTypes = Field(
        ..., description="The soil type", examples=["Acrisols"]
    )
    count: int = Field(
        ...,
        description="The number of occurrences of the soil type within the queried bounding box",
        examples=[70],
        title="Count",
    )


class SoilTypeSummaryInfo(BaseModel):
    summaries: List[SoilTypeSummary] = Field(
        ...,
        description="The soil type summaries within the queried bounding box",
        title="Summaries",
    )


class SoilTypeSummaryJSON(BaseModel):
    type: FeatureType = Field(
        ..., description="The feature type of this geojson-object"
    )
    geometry: BoundingBoxGeometry = Field(
        ..., description="The geometry of the queried location"
    )
    properties: SoilTypeSummaryInfo = Field(
        ..., description="The soil type summary information"
    )


class SoilTypeInfo(BaseModel):
    most_probable_soil_type: SoilTypes = Field(
        ...,
        description="The most probable soil type at the queried location",
        examples=["Acrisols"],
    )
    probabilities: Optional[List[SoilTypeProbability]] = Field(
        None, description="The soil type probabilities", title="Probabilities"
    )


class SoilTypeJSON(BaseModel):
    type: FeatureType = Field(..., description="The feature type of the geojson-object")
    geometry: PointGeometry = Field(
        ..., description="The geometry of the queried location"
    )
    properties: SoilTypeInfo = Field(
        ..., description="The soil type information at the queried location"
    )
